import React, { useState } from "react";

const IndicatorCalculations = () => {
  const [selectedIndicator, setSelectedIndicator] = useState(""); // üìå A kiv√°lasztott mutat√≥
  const [stockPrice, setStockPrice] = useState(""); // üìå R√©szv√©ny √°rfolyama
  const [eps, setEPS] = useState(""); // üìå Egy r√©szv√©nyre jut√≥ nyeres√©g (EPS)
  const [bookValue, setBookValue] = useState(""); // üìå K√∂nyv szerinti √©rt√©k
  const [result, setResult] = useState(null); // üìå A sz√°m√≠tott eredm√©ny

  // üìå Mutat√≥k magyar√°zata
  const indicatorDescriptions = {
    "P/E": {
      explanation: "A P/E mutat√≥ (Price-to-Earnings) azt mutatja meg, hogy a r√©szv√©ny √°rfolyama h√°nyszoros√°t √©ri az egy r√©szv√©nyre jut√≥ nyeres√©gnek (EPS).",
      interpretation: [
        "Ha magas (30+), akkor a r√©szv√©ny dr√°g√°nak sz√°m√≠that, √©s nagy n√∂veked√©si v√°rakoz√°s van m√∂g√∂tte.",
        "Ha alacsony (10-20), akkor a r√©szv√©ny olcs√≥bb lehet, de fontos a c√©g j√∂v≈ëbeli kil√°t√°sait is figyelembe venni.",
        "Nagyon alacsony √©rt√©k (pl. 5 alatt) arra utalhat, hogy a piac nem b√≠zik a c√©g n√∂veked√©s√©ben."
      ]
    },
    "P/B": {
      explanation: "A P/B mutat√≥ (Price-to-Book) megmutatja, hogy a r√©szv√©ny √°rfolyama hogyan viszonyul a v√°llalat k√∂nyv szerinti √©rt√©k√©hez.",
      interpretation: [
        "Ha 1 alatt van, akkor a r√©szv√©ny alul√©rt√©kelt lehet, mert a c√©g eszk√∂zei t√∂bbet √©rnek, mint a r√©szv√©nyek √∂sszes√≠tett piaci √©rt√©ke.",
        "Ha 1 felett van, akkor a piac t√∂bbre √©rt√©keli a c√©get, de ha t√∫l magas (10+), lehet, hogy t√∫l√©rt√©kelt a r√©szv√©ny."
      ]
    }
  };

  // üìå Kezeli a kiv√°lasztott mutat√≥t
  const handleIndicatorChange = (event) => {
    setSelectedIndicator(event.target.value);
    setStockPrice("");
    setEPS("");
    setBookValue("");
    setResult(null);
  };

  // üìå Sz√°m√≠t√°si logika
  const calculateResult = () => {
    let calculatedValue = null;

    if (selectedIndicator === "P/E" && stockPrice && eps) {
      calculatedValue = (parseFloat(stockPrice) / parseFloat(eps)).toFixed(2);
    }

    if (selectedIndicator === "P/B" && stockPrice && bookValue) {
      calculatedValue = (parseFloat(stockPrice) / parseFloat(bookValue)).toFixed(2);
    }

    setResult(calculatedValue);
  };

  return (
    <div className="p-4 bg-white shadow-lg rounded-lg">
      <label htmlFor="indicators" className="font-bold">
        V√°lassz egy mutat√≥t:
      </label>
      <select
        id="indicators"
        value={selectedIndicator}
        onChange={handleIndicatorChange}
        className="block w-full p-2 mb-4 border border-gray-300 rounded-md"
      >
        <option value="">-- V√°lassz mutat√≥t --</option>
        <option value="P/E">P/E (√År/Nyeres√©g)</option>
        <option value="P/B">P/B (√År/K√∂nyv szerinti √©rt√©k)</option>
      </select>

      {/* üìå Ha van kiv√°lasztott mutat√≥, akkor megjelenik a magyar√°zat */}
      {selectedIndicator && (
        <div className="bg-gray-100 p-3 rounded-md mb-4">
          <h3 className="font-semibold text-lg">{selectedIndicator} magyar√°zata</h3>
          <p className="text-gray-700">{indicatorDescriptions[selectedIndicator].explanation}</p>
          <ul className="list-disc ml-4 mt-2 text-gray-600">
            {indicatorDescriptions[selectedIndicator].interpretation.map((point, index) => (
              <li key={index}>{point}</li>
            ))}
          </ul>
        </div>
      )}

      {/* üìå Dinamikusan megjelen≈ë input mez≈ëk */}
      {selectedIndicator && (
        <div>
          <label className="font-bold">R√©szv√©ny √°rfolyama (USD):</label>
          <input
            type="number"
            value={stockPrice}
            onChange={(e) => setStockPrice(e.target.value)}
            className="block w-full p-2 mb-3 border border-gray-300 rounded-md"
          />

          {selectedIndicator === "P/E" && (
            <>
              <label className="font-bold">Egy r√©szv√©nyre jut√≥ nyeres√©g (EPS) (USD):</label>
              <input
                type="number"
                value={eps}
                onChange={(e) => setEPS(e.target.value)}
                className="block w-full p-2 mb-3 border border-gray-300 rounded-md"
              />
            </>
          )}

          {selectedIndicator === "P/B" && (
            <>
              <label className="font-bold">K√∂nyv szerinti √©rt√©k (USD):</label>
              <input
                type="number"
                value={bookValue}
                onChange={(e) => setBookValue(e.target.value)}
                className="block w-full p-2 mb-3 border border-gray-300 rounded-md"
              />
            </>
          )}

          <button
            onClick={calculateResult}
            className="w-full p-2 mt-3 bg-blue-500 text-white rounded-md hover:bg-blue-600"
          >
            Sz√°m√≠t√°s
          </button>

          {result !== null && (
            <p className="mt-3 font-bold">
              {selectedIndicator} √©rt√©ke: {result}
            </p>
          )}
        </div>
      )}
    </div>
  );
};

export default IndicatorCalculations;
